/*flexberryautogenerated="true"*/

namespace IIS.CodeReviewEngine
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using ICSSoft.STORMNET.Web.Controls;
    using Microsoft.TeamFoundation.Client;
    using Microsoft.TeamFoundation.Server;

    /// <summary>
    /// Списковая форма с программистами.
    /// </summary>
    public partial class TFSProgrammerL : BaseListForm<TFSProgrammer>
    {
        /// <summary>
        /// Конструктор без параметров,
        /// инициализирует свойства, соответствующие конкретной форме.
        /// </summary>
        public TFSProgrammerL()
            : base(TFSProgrammer.Views.TFSProgrammerL)
        {
            EditPage = TFSProgrammerE.FormPath;
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/TFSProgrammer/TFSProgrammerL.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Загрузка пользователей из TFS.
        /// </summary>
        /// <param name="sender">Инициатор события.</param>
        /// <param name="e">Аргументы события.</param>
        protected void FillTFSUsers_OnClick(object sender, EventArgs e)
        {
            try
            {
                string teamProjectCollectionURL = TeamProjectCollectionURL.Text;
                var tfs = new TfsTeamProjectCollection(new Uri(teamProjectCollectionURL));
                tfs.EnsureAuthenticated();

                var gss = tfs.GetService<IGroupSecurityService>();

                Identity sids = gss.ReadIdentity(SearchFactor.AccountName, "Project Collection Valid Users", QueryMembership.Expanded);
                
                if (sids == null)
                    throw new InvalidOperationException(
                        string.Format("У авторизованного пользователя не достаточно полномочий для получения списка пользователей из TFS-коллекции '{0}'.", teamProjectCollectionURL));

                Identity[] userId = gss.ReadIdentities(SearchFactor.Sid, sids.Members, QueryMembership.None);

                var users = new List<Identity>(userId);

                var windowsUsers = users.Where(x => x.Type == IdentityType.WindowsUser).OrderBy(x => x.DisplayName);

                var ds = (SQLDataService)DataServiceProvider.DataService;
                var newProgrammers = new List<TFSProgrammer>();
                foreach (Identity user in windowsUsers)
                {
                    // проверим, есть ли такой пользователь в БД, если нет, то создадим и добавим в выходной массив
                    int count = ds.Query<TFSProgrammer>(TFSProgrammer.Views.TFSProgrammerE).Count(p => p.Login == user.AccountName && p.Name == user.DisplayName && p.Domain == user.Domain);

                    if (count == 0)
                    {
                        var programmer = new TFSProgrammer
                        {
                            Name = user.DisplayName,
                            Login = user.AccountName,
                            Domain = user.Domain
                        };
                        newProgrammers.Add(programmer);
                    }
                }

                DataObject[] dObjs = newProgrammers.ToArray();
                ds.UpdateObjects(ref dObjs);
            }
            catch (Exception ex)
            {
                WebErrorBoxRiser.Rise(ex, true);
            }
        }
    }
}
